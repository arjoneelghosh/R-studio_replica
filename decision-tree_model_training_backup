import pandas as pd
from sklearn.tree import DecisionTreeRegressor, export_text
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import streamlit as st

def train_model(data):
    """Train and display a decision tree model."""

    st.header("Decision Tree Model Training")

    # Step 1: Allow user to select feature and target columns
    feature_columns = st.multiselect("Select Feature Columns", options=data.columns, key="dt_feature_columns")
    target_column = st.selectbox("Select Target Column", options=data.columns, key="dt_target_column")

    if not feature_columns or not target_column:
        st.warning("Please select at least one feature column and a target column.")
        return

    # Step 2: Split data into training and testing sets
    X = data[feature_columns]
    y = data[target_column]

    try:
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    except ValueError as e:
        st.error(f"Error splitting data: {e}")
        return

    # Step 3: Train Decision Tree model
    max_depth = st.sidebar.slider("Max Depth of Decision Tree", min_value=1, max_value=20, value=5, key="dt_max_depth")
    model = DecisionTreeRegressor(max_depth=max_depth, random_state=42)
    model.fit(X_train, y_train)

    # Step 4: Make predictions and evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    st.write(f"### Mean Squared Error: {mse:.2f}")

    # Step 5: Display tree structure
    if st.checkbox("Show Decision Tree Structure", key="dt_show_tree"):
        st.write("### Decision Tree Structure")
        tree_representation = export_text(model, feature_names=feature_columns)
        st.text(tree_representation)

    # Step 6: Visualize feature importance
    feature_importance = model.feature_importances_
    importance_df = pd.DataFrame({"Feature": feature_columns, "Importance": feature_importance})
    importance_df = importance_df.sort_values(by="Importance", ascending=False)

    st.write("### Feature Importance")
    st.dataframe(importance_df)

    if st.checkbox("Show Feature Importance Bar Chart"):
        importance_df.set_index("Feature").plot(kind="bar", figsize=(10, 6), legend=False)
        st.pyplot()
