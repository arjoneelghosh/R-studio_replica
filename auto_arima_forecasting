import pandas as pd 
import streamlit as st
from prophet import Prophet
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import ParameterGrid
from pmdarima import auto_arima
import statsmodels.api as sm

def forecast_with_arima(data):
    """Perform time series forecasting using ARIMA with automatic order selection and display MAPE."""
    st.sidebar.header("Forecasting with ARIMA")

    if 'Date' not in data.columns:
        if 'Year' in data.columns and 'Month' in data.columns:
            data['Date'] = pd.to_datetime(data['Year'].astype(str) + '-' + data['Month'].astype(str))
        else:
            st.error("Dataset must contain 'Year' and 'Month' columns or a 'Date' column.")
            return

    target_column = st.sidebar.selectbox("Select Target Column", options=[col for col in data.columns if col not in ['Year', 'Month', 'Date']], key="arima_target_column")
    data = data.sort_values(by='Date').dropna(subset=['Date', target_column])
    data = data.rename(columns={'Date': 'ds', target_column: 'y'})
    data.set_index('ds', inplace=True)

    st.write("### ARIMA Forecasting")

    # User input for forecast periods
    forecast_periods = st.sidebar.number_input("Forecast Periods", min_value=1, max_value=365, value=30)

    if st.button("Run ARIMA Forecasting"):
        try:
            # Auto ARIMA to find the best parameters
            model = auto_arima(data['y'], seasonal=True, m=12, trace=True, suppress_warnings=True)
            
            # Dynamically infer frequency
            freq = pd.infer_freq(data.index) or 'M'
            
            # Generate future dates
            future_dates = pd.date_range(start=data.index[-1], periods=forecast_periods + 1, freq=freq)[1:]
            
            # Make predictions
            forecast_values = model.predict(n_periods=forecast_periods)

            # Create forecast DataFrame
            forecast_df = pd.DataFrame({'ds': future_dates, 'yhat': forecast_values})

            # Calculate MAPE
            actuals = data['y'][-forecast_periods:].values  # Last n actual values
            preds = forecast_values[:len(actuals)]  # Match with available actuals
            min_length = min(len(actuals), len(preds))
            actuals, preds = actuals[:min_length], preds[:min_length]
            mape = np.mean(np.abs((actuals - preds) / actuals)) * 100  # Compute MAPE

            # Display MAPE in Streamlit
            st.write(f"### Model Accuracy (MAPE): {mape:.2f}%")

            # Plot actual vs forecast
            plt.figure(figsize=(12, 6))
            plt.plot(data.index, data['y'], label="Actual", marker='o', color='blue')
            plt.plot(forecast_df['ds'], forecast_df['yhat'], label="Forecast", linestyle='dashed', marker='o', color='orange')
            plt.legend()
            plt.xlabel("Date")
            plt.ylabel("Values")
            plt.title("ARIMA Forecast")
            plt.grid(True)
            st.pyplot(plt)

            # Display Forecasted Values
            st.write("### Forecasted Values")
            st.dataframe(forecast_df)

        except Exception as e:
            st.error(f"Error in ARIMA forecasting: {e}")
